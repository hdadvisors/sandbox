---
title: "Appendix 7: Scenario Models Methodology"
format:
  html:
    theme: flatly
    author: "Jonathan Knopf (jonathan@hdadvisors.net)"
    number-sections: true
    number-offset: [1,6]
    number-depth: 2
  pdf:
    documentclass: scrreprt
    number-sections: true
    number-offset: 7
    number-depth: 1
    mainfont: "Open Sans"
    fontsize: 10pt
    colorlinks: true
    reference-location: section
    include-in-header: 
      - text: |
          \renewcommand{\thepage}{A7-\arabic{page}}
          \renewcommand{\thesection}{A7.\arabic{section}}
execute:
  echo: false
  warning: false
  #freeze: auto
---

## Setup

This document provides a step-by-step methodology to model three different Local Rent Supplement Program (LRSP) scenarios for the City of Alexandria. Data is created, transformed, and visualized using the R coding language. The R libraries used for this analysis are listed below.

```{r}
#| label: setup
#| echo: true

library(tidyverse)
library(scales)
library(kableExtra)
library(formattable)
library(gt)
library(ggtext)
library(janitor)

```

```{r}
library(hdatools)
```



## Standard parameters

### Income limits

The models use HUD's FY 2023 Multifamily Tax Subsidy Projects (MTSP) Income Limits for Washington-Arlington-Alexandria, DC-VA-MD HUD Metro FMR Area.[^1] These are the official income limits used to determine eligibility for LIHTC projects and other affordable multifamily properties financed by tax-exempt bonds.

While the MTSP limits differ slightly from the standard income limits used for Housing Choice Vouchers, public housing, and other HUD-supported assistance programs, they are used here because they publish limits for a greater range of AMI levels, including 40% AMI and 60% AMI. The City of Alexandria generally uses MTSP limits for its housing programs.

```{r}
#| label: hud-ami

# FY 2023 MTSP Income Limits for Washington-Arlington-Alexandria, DC-VA-MD HUD Metro FMR Area

hud_ami <- tibble(
  AMI = c("80% AMI", "70% AMI", "60% AMI", "50% AMI", "40% AMI", "30% AMI", "20% AMI"),
  person1 = c(84400, 73850, 63300, 52750, 42200, 31650, 21100),
  person2 = c(96480, 84240, 72660, 60300, 48240, 36180, 24120),
  person3 = c(108560, 94990, 81420, 67850, 54280, 40710, 27140),
  person4 = c(120560, 105490, 90240, 75350, 60280, 45210, 30140),
  person5 = c(130240, 113960, 97460, 81400, 65210, 48840, 32460),
  person6 = c(139920, 122430, 104940, 87450, 69960, 52470, 34980),
  person7 = c(149520, 130830, 112140, 93450, 74760, 56070, 37380),
  person8 = c(159200, 139300, 119400, 99500, 79600, 59700, 39800)
) |> 
  pivot_longer(
    2:9,
    names_to = "hh_size",
    values_to = "income"
  )

```

```{r}
#| label: tbl-hud-ami
#| tbl-cap: "FY 2023 MTSP Income Limits for Washington-Arlington-Alexandria, DC-VA-MD HUD Metro FMR Area"
#| tbl-pos: H

if (knitr::is_html_output()) {
  
  hud_ami |>
    arrange(AMI) |>
    filter(str_detect(hh_size, "[123456]")) |>
    mutate(
      hh_size = str_replace(hh_size, "(\\D+)(\\d+)", "\\2 \\1")
    ) |>
    pivot_wider(
      names_from = hh_size,
      values_from = income
    ) |>
    gt(
      rowname_col = "AMI"
    ) |>
    cols_width(
      everything() ~ px(90)
    ) |>
    cols_align(
      align = "center",
      columns = 2:6
    ) |>
    cols_align(
      align = "left",
      columns = 1
    ) |>
    fmt_currency(columns = 2:6, currency = "USD", decimals = 0) |>
    tab_source_note(
      source_note = md("**Note:** Income limits for households with 7 or more persons not shown.")
    ) |>
    tab_style(
      style = cell_text(weight = "bold"),
      locations = cells_column_labels()
    )
  
} else {
  
  hud_ami |>
    arrange(AMI) |>
    filter(str_detect(hh_size, "[123456]")) |>
    mutate(
      hh_size = str_replace(hh_size, "(\\D+)(\\d+)", "\\2 \\1"),
      income = formattable::currency(income, digits = 0)
    ) |>
    pivot_wider(
      names_from = hh_size,
      values_from = income
    ) |>
    kbl(booktabs = T, align = "lcccccc", linesep = "") |> 
    row_spec(0, bold = T) |> 
    kable_styling(full_width = T, latex_options = "hold_position")
  
}

```

```{r}
#| label: hud-plot
#| eval: false
#| echo: false

hud_plot <- hud_ami |> 
  filter(
    !AMI %in% c("80% AMI", "70% AMI", "20% AMI"),
    str_detect(hh_size, "[123456]")
    ) |> 
  mutate(
    hh_size = case_match(
      hh_size,
      "person1" ~ "1 person",
      "person2" ~ "2 person",
      "person3" ~ "3 person",
      "person4" ~ "4 person",
      "person5" ~ "5 person",
      "person6" ~ "6 person"
    ),
    hh_size = fct_inorder(hh_size)
  )

ggplot(hud_plot, aes(x = income, y = fct_rev(hh_size), label = label_currency(accuracy = 1)(income))) +
  facet_wrap(~AMI, scales = "free_y") +
  geom_col(aes(fill = AMI)) +
  scale_fill_hda(-1) +
  #geom_col(fill = "#445ca9") +
  geom_text(
    size = 9, color = "white", nudge_x = -9000
    ) +
  scale_x_continuous(labels = label_currency(), expand = c(0, 0)) +
  theme_hda(base_size = 26) +
  labs(
    title = "HUD FY 2023 Multifamily Tax Subsidy Projects income limits",
    subtitle = "Household income limits by AMI and household size",
    caption = "**Source:** HUD FY 2023 MTSP Income Limits for Washington-Arlington-Alexandria, DC-VA-MD HUD Metro FMR Area"
  ) +
  theme(
    axis.text.x = element_blank(),
    panel.grid.major.y = element_blank(),
    strip.text = element_text(face = "plain", color = "#383c3d", size = 28, hjust = 0),
    plot.subtitle = element_markdown(margin = margin(t = -5, b = 5))
  )

ggsave("alx/alx-ami.png", width = 6.5, height = 4, units = "in", bg = "white")

```

[^1]: [FY 2023 MTSP Income Limits](https://www.huduser.gov/portal/datasets/il/il2023/2023sum_mtsp.odn?inputname=METRO47900M47900*Washington-Arlington-Alexandria%2C+DC-VA-MD+HUD+Metro+FMR+Area&area_choice=hmfa&year=2023#top) (Accessed 2024-01-19)

\newpage

### Fair Market Rents

Models where the rent subsidy is calculated based on Fair Market Rents (FMR) use the current Small Area Fair Market Rents (SAFMR) adopted by the Arlington Redevelopment and Housing Authority for 2023. SAFMRs are provided by ZIP code.

While actual subsidy amounts will depend on the ZIP code where the tenant lives, models will use the average values (by unit size) across all ZIP codes. This is a simplification to avoid making assumptions about the geographic distribution of participating households.

```{r}
#| label: fmrs

# ARHA Proposed Payment Standard 2023

fmrs_all <- tibble(
  ZIP = c("22301", "22302", "22304", "22305", "22311", "22312", "22313", "22314"),
  bedroom0 = c(2013, 1980, 1914, 1859, 1936, 1848, 1782, 2563),
  bedroom1 = c(2046, 2013, 1947, 1892, 1969, 1870, 1815, 2607),
  bedroom2 = c(2332, 2288, 2211, 2156, 2244, 2134, 2068, 2970),
  bedroom3 = c(2915, 2860, 2761, 2695, 2805, 2673, 2585, 3718),
  bedroom4 = c(3476, 3410, 3300, 3212, 3344, 3179, 3080, 4433)
) |> 
  pivot_longer(
    2:6,
    names_to = "bedrooms",
    values_to = "FMR"
  ) |> 
  pivot_wider(
    names_from = ZIP,
    values_from = FMR
  ) |> 
  mutate(
    average = rowMeans(across(2:9))
    )

fmrs_avg <- fmrs_all |> 
  select(bedrooms, "fmr_avg" = average)

```

```{r}
#| label: fmrs-plot
#| eval: false

fmrs_plot <- fmrs_all |> 
  pivot_longer(
    2:10,
    names_to = "area",
    values_to = "fmr"
  ) |> 
  mutate(
    type = case_when(
      area == "FMR" ~ "Average",
      .default = "ZIP code"
    ), .before = 2
  ) |> 
  mutate(
    area = str_replace_all(area, "FMR", "Average"),
    area = fct_other(
      fct_reorder(area, fmr),
      drop = "Average", other_level = "Average"
      )
  ) |> 
  mutate(
    bedrooms = case_match(
      bedrooms,
      "bedroom0" ~ "Studio",
      "bedroom1" ~ "1 bedroom",
      "bedroom2" ~ "2 bedroom",
      "bedroom3" ~ "3 bedroom",
      "bedroom4" ~ "4 bedroom",
    ),
    bedrooms = fct_inorder(bedrooms)
  ) |> 
  filter(bedrooms != "4 bedroom")

ggplot(fmrs_plot, aes(x = fmr, y = area, fill = type)) +
  facet_wrap(~bedrooms, scales = "free_y") +
  geom_col() +
  geom_text(
    data = filter(fmrs_plot, area %in% c("Average", "22314", "22313")),
    aes(label = label_currency(accuracy = 1)(fmr)), size = 9, color = "white", nudge_x = -300
    ) +
  scale_x_continuous(labels = label_currency(), expand = c(0, 0)) +
  scale_fill_hda() +
  theme_hda(base_size = 26) +
  labs(
    title = "ARHA 2023 Payment Standards",
    subtitle = "Based on HUD FY 2023 Small Area Fair Market Rents (SAFMR) by ZIP code and unit size",
    caption = "**Source:** Alexandria Redevelopment and Housing Authority, \"Proposed Payment Standard 2023\""
  ) +
  theme(
    axis.text.x = element_blank(),
    panel.grid.major.y = element_blank(),
    strip.text = element_text(face = "plain", color = "#383c3d", size = 28, hjust = 0),
    plot.subtitle = element_markdown(margin = margin(t = -5, b = 2))
  )

ggsave("alx-safmr.png", width = 6.5, height = 4, units = "in", bg = "white")

```

```{r}
#| label: tbl-fmrs
#| tbl-cap: "ARHA 2023 Payment Standards"
#| tbl-pos: H

fmrs_tbl <- fmrs_all |> 
  pivot_longer(
    2:10,
    names_to = "ZIP code",
    values_to = "fmr"
  ) |> 
  mutate(
    bedrooms = case_match(
      bedrooms,
      "bedroom0" ~ "Studio",
      "bedroom1" ~ "1 bedroom",
      "bedroom2" ~ "2 bedroom",
      "bedroom3" ~ "3 bedroom",
      "bedroom4" ~ "4 bedroom",
    ),
    bedrooms = fct_inorder(bedrooms),
    `ZIP code` = str_to_title(`ZIP code`)
  ) |> 
  filter(bedrooms != "4 bedroom") |> 
  pivot_wider(
      names_from = bedrooms,
      values_from = fmr
    )

if (knitr::is_html_output()) {

  fmrs_tbl |>
    filter(`ZIP code` != "Average") |> 
    gt(
      rowname_col = "ZIP code"
    ) |> 
    cols_width(
      everything() ~ px(100)
    ) |> 
    cols_align(
      align = "center",
      columns = 2:5
    ) |> 
    cols_align(
      align = "left",
      columns = 1
    ) |> 
    fmt_currency(columns = 2:5, currency = "USD", decimals = 0) |> 
    tab_source_note(
      source_note = md("**Note:** Payment standards for 4 bedroom units not shown.")
      ) |> 
    tab_style(
      style = cell_text(weight = "bold"),
      locations = cells_column_labels()
    ) |> 
    tab_style(
      style = cell_text(align = "left"),
      locations = cells_body(columns = 1)
    ) |> 
    grand_summary_rows(
      columns = 2:5,
      fns = Average ~ mean(.),
      fmt = ~ fmt_currency(., currency = "USD", decimals = 2)
    )
  
} else {

  fmrs_tbl |>
    mutate(
      across(
        2:5,
        ~ if_else(
          row_number() %in% grep("Average", `ZIP code`),
          paste0("$", formatC(as.numeric(.x), format = "f", digits = 2, big.mark = ",")),
          paste0("$", formatC(as.numeric(.x), format = "f", digits = 0, big.mark = ","))
          )
        )
      ) |> 
    kbl(booktabs = T, align = "lcccc", linesep = "") |> 
    row_spec(0, bold = T) |> 
    row_spec(9, bold = T) |> 
    kable_styling(full_width = T, latex_options = "HOLD_position")
  
}

```

\newpage

## Scenario A - Reduce Cost Burden for 30% to 50% AMI Households

This scenario outlines a LRSP with a total annual allocation of \$500,000. The primary goal of the program is to reduce housing cost burden among households with incomes between 30% and 50% AMI. The model uses the following inputs to estimate the number of households served.

+------------------------------------+------------------------------------------------------+
| **Variable**                       | **Input**                                            |
+====================================+======================================================+
| *Total program budget*             | \$500,000\newline                                    |
+------------------------------------+------------------------------------------------------+
| *Eligibility*                      | Household income between\newline                     |
|                                    | 30% and 50% AMI\newline                              |
+------------------------------------+------------------------------------------------------+
| *Subsidy amount*                   | Difference between the affordable monthly\newline    |
|                                    | rent at 60% AMI and the affordable monthly\newline   |
|                                    | rent at 40% AMI\newline                              |
+------------------------------------+------------------------------------------------------+
| *Distribution of household*\       | 15% - 1-person\newline                               |
| *sizes among participants*         | 15% - 2-person\newline                               |
|                                    | 20% - 3-person\newline                               |
|                                    | 20% - 4-person\newline                               |
|                                    | 20% - 5-person\newline                               |
|                                    | 10% - 6-person\newline                               |
+------------------------------------+------------------------------------------------------+
| *Administrative overhead*          | 15% of total program budget                          |
+------------------------------------+------------------------------------------------------+

Notes:

* No other eligibility conditions apply.
* “Affordable monthly rent” is 30% of gross household income.
* The subsidy calculated for each household is respective to their household size. No assumed breakdown of households by AMI is needed.
* The administrative overhead includes housing-specific case management.

\newpage

### Inputs

Assign budget (dollars) and overhead costs (percent) variables:

```{r}
#| echo: true

# Budget allocation
sA_budget <- 500000

# Overhead percentage
sA_overhead <- 0.15

```

Assign household distributions by household size (number of persons):

```{r}
#| echo: true

# Distribution of households by household size
sA_person <- tibble(
  hh_size = paste0("person", 1:6),
  pct = c(0.15, 0.15, 0.20, 0.20, 0.20, 0.10)
)

```

### Calculations

Calculate affordable rents at 40% AMI and 60% AMI for households with 1 to 6 persons (`hh_size`) to determine monthly subsidy amounts (`subsidy`): 

```{r}
#| echo: true

# Monthly subsidy about by household size
sA_subsidy <- hud_ami |> 
  filter(
    AMI %in% c("40% AMI", "60% AMI"), # 40% and 60% AMI only
    str_detect(hh_size, "[123456]")   # 1-6 person households only
    ) |> 
  mutate(
    aff_rent = income/12 * 0.3        # 30% of monthly income
  ) |> 
  select(-3) |> 
  pivot_wider(
    names_from = AMI,
    values_from = aff_rent
  ) |> 
  mutate(
    subsidy = `60% AMI` - `40% AMI`   # Calculate subsidy
  ) |> 
  select(1, 4)

```

```{r}

sA_subsidy |>
  kbl(booktabs = T, align = "lc", linesep = "") |> 
  row_spec(0, bold = T) |> 
  kable_styling(full_width = T, latex_options = "hold_position")

```

Join the monthly subsidy amounts by household size (`subsidy`) and calculate annual subsidy per household (`subsidy_annual`):

```{r}
#| echo: true

# Annual subsidy per household size
sA_subsidy_annual <- sA_person |>
  left_join(sA_subsidy) |> 
  mutate(subsidy_annual = subsidy * 12)

```

```{r}

sA_subsidy_annual |> 
  kbl(booktabs = T, align = "lccc", linesep = "", row.names = FALSE) |> 
  row_spec(0, bold = T) |> 
  kable_styling(full_width = T, latex_options = "hold_position")

```

\
Calculate the theoretical share of subsidy allocated for each household size (`subsidy_share`). Determine the number of households served (`hh_served`) by normalizing `subsidy_share` to the known budget, then calculate the budget share (`budget`) for each household size:

```{r}
#| echo: true

# Annual subsidy per household type
sA_served <- sA_subsidy_annual |>
  mutate(
    subsidy_share = subsidy_annual * pct, # Subsidy per HH type
    hh_served = pct*(sA_budget * (1 - sA_overhead))/sum(subsidy_share) # Adjust to known budget
  ) |> 
  mutate(budget = hh_served * subsidy_annual)

```

```{r}

# OK

sA_served |>
  select(1, 4, 5, 7, 6) |> 
  mutate(
    across(3:4, ~formattable::digits(.x, 2)),
    hh_served = formattable::digits(hh_served, 3)
    ) |> 
  adorn_totals(,,,,4,5) |> 
  kbl(booktabs = T, align = "lcccc", linesep = "", row.names = FALSE) |> 
  row_spec(0, bold = T) |> 
  kable_styling(full_width = T, latex_options = "hold_position", font_size = 8)

```

\newpage

### Model results

Round each estimate to the nearest whole number and determine total:

```{r}
#| echo: true

# Rounded estimates with grand total
sA_estimate <- sA_served |>
  select(1, 7, 6) |> 
  mutate(
    hh_served = round(hh_served),
    hh_size = case_match(
      hh_size,
      "person1" ~ "1 person",
      "person2" ~ "2 person",
      "person3" ~ "3 person",
      "person4" ~ "4 person",
      "person5" ~ "5 person",
      "person6" ~ "6 person"
    )
  ) |> 
  adorn_totals()

```

```{r}
#| label: tbl-sA
#| tbl-cap: "Scenario A - Estimated Households Served by Household Size"
#| tbl-pos: H

sA_estimate |> 
  mutate(
    budget = formattable::currency(budget, digits = 0)
  ) |> 
  kbl(
    booktabs = T, align = "lcc", linesep = "", row.names = FALSE,
    col.names = c("Household size", "Annual cost", "Households served")
    ) |> 
  row_spec(0, bold = T) |> 
  row_spec(7, bold = T) |>
  kable_styling(full_width = T, latex_options = "hold_position")

sA_total <- sum(round(sA_served$hh_served))

sA_avg <- (sA_budget)/sA_total

```

::: callout-note
### Scenario A results

*Average annual program cost per household: `{r} label_currency()(sA_avg)`*

\
Under Scenario A, a total program budget of \$500,000 with a 15% administrative overhead leaves \$425,000 to fund rental assistance. Given the assumed household distribution by household size, the total number of households served is `{r} sA_total`.
:::

\newpage

## Scenario B - Stabilize Unhoused Persons

This scenario outlines a LRSP serving a total of 150 households experiencing housing insecurity. The primary goal of the program is to provide deep rental assistance to help these households achieve housing stability and avoid homelessness. The model uses the following inputs to estimate the annual program cost required to serve 150 households.

+------------------------------------+------------------------------------------------------+
| **Variable**                       | **Input**                                            |
+====================================+======================================================+
| *Total households served*          | 150\newline                                          |
+------------------------------------+------------------------------------------------------+
| *Eligibility*                      | Household/individual determined to be\newline        |
|                                    | homeless in City's annual Point-in-Time count\newline|
+------------------------------------+------------------------------------------------------+
| *Subsidy amount*                   | Difference between the affordable monthly\newline    |
|                                    | rent at 60% AMI and the households' current\newline  |
|                                    | affordable monthly rent\newline                      |
+------------------------------------+------------------------------------------------------+
| *Distribution of household types*\ | 2/3 - Single-person\newline                          |
| *among participants*               | 1/3 - Household with children\newline                |
+------------------------------------+------------------------------------------------------+
| *Distribution of unit sizes*\      | 2/3 - Studios\newline                                |
| *among participants*               | 1/3 - 2-bedroom\newline                              |
+------------------------------------+------------------------------------------------------+
| *Distribution of incomes*\         | 50% - SSI income\newline                             |
| *among participants*               | 50% - \$1,500 per month\newline                      |
+------------------------------------+------------------------------------------------------+
| *Administrative overhead*          | 20% of total program budget                          |
+------------------------------------+------------------------------------------------------+

Notes:

* No other eligibility conditions apply.
* “Affordable monthly rent” is 30% of gross household income.
* The subsidy calculated for each household is respective to their household size.
* The administrative overhead is higher than Scenario A to accommodate more intensive case management requirements for persons experiencing homelessness.

\newpage

### Inputs

Assign households served and overhead costs (percent) variables:

```{r}
#| echo: true

# Total households served
sB_hh_served <- 150

# Overhead percentage
sB_overhead <- 0.20

```

We can reasonably assume that all single-person households will live in studios, while all households with children will live in 2-bedroom units. Therefore, we do not need separate distribution shares for each. However, we do need to determine more specific household sizes.

For this model, among households with children, we will assume the following breakdown, as shown in the code below:

* 1/2 are 2-person (adult and child)
* 1/4 are 3-person (adult and two children, or two adults and child)
* 1/4 are 4-person (adult and three children, or two adults and two children)

```{r}
#| echo: true

# Distribution of households by size
sB_person <- c(
  `person1` = 0.667, # 2/3
  `person2` = 0.167, # 1/2 of 1/3
  `person3` = 0.083, # 1/4 of 1/3
  `person4` = 0.083  # 1/4 of 1/3
  )

```

Assign household distribution by income and calculate :

```{r}
#| echo: true

# Distribution of households by income
sB_income <- c(`ssi` = 0.5, `1500` = 0.5)

```

Because SSI amounts depend on whether the beneficiary lives alone or is married, their affordable rents will vary. However, due to the relatively small share of households in this model that could include two married adults, we will assume that any persons enrolled in SSI receive benefits for an individual. The current monthly SSI amount for an eligible individual is \$943.[^2]

[^2]: [SSI Federal Payment Amounts for 2024](https://www.ssa.gov/oact/cola/SSI.html) (Accessed 2024-01-19)

```{r}
#| echo: true

# Monthly SSI income for eligible individual
sB_ssi <- 943

```

\newpage

### Calculations

Calculate affordable rents for SSI income and \$1,500/month (`income_source`) for households with 1 to 4 persons (`hh_size`) to determine monthly subsidy amounts (`subsidy`): 

```{r}
#| echo: true

# Monthly subsidy about by household size
sB_subsidy <- hud_ami |> 
  filter(
    AMI %in% c("60% AMI"),        # 60% AMI only
    str_detect(hh_size, "[1234]") # 1-4 person households only
    ) |> 
  mutate(
    aff_rent_60ami = income/12 * 0.3 # 30% of monthly income
  ) |> 
  select(2, 4) |> 
  mutate(
    `ssi` = sB_ssi * 0.3,  # 30% of SSI
    `1500` = 1500 * 0.3 # 30% of $1,500
  ) |> 
  pivot_longer(
    3:4,
    names_to = "income_source",
    values_to = "aff_rent"
  ) |> 
  mutate(
    subsidy = aff_rent_60ami - aff_rent # Calculate subsidy
  ) |> 
  select(3, 1, 5)

```

```{r}

sB_subsidy |>
  arrange(desc(income_source)) |> 
  kbl(booktabs = T, align = "llc", linesep = "") |> 
  row_spec(0, bold = T) |> 
  collapse_rows(columns = 1, valign = "top") |> 
  kable_styling(full_width = T, latex_options = "hold_position")

```

\newpage

Tabulate unique shares for both income source and household size:

```{r}
#| echo: true

sB_dist <- expand.grid(
  income_source = names(sB_income),
  hh_size = names(sB_person)
  ) |>
  mutate(pct = sB_income[income_source] * sB_person[hh_size])

```

```{r}

sB_dist |>
  arrange(income_source) |> 
  kbl(booktabs = T, align = "llc", linesep = "") |> 
  row_spec(0, bold = T) |> 
  collapse_rows(columns = 1, valign = "top") |> 
  kable_styling(full_width = T, latex_options = "hold_position")

```

\
Multiply each household share by the total number of households served (150) to determine the respective number served for each group (`hh_served`), rounded to the nearest whole number:

```{r}
#| echo: true

sB_served <- sB_dist |> 
  mutate(hh_served = round(pct * sB_hh_served)) 

```

\newpage

### Model results

Join the monthly subsidy amounts(`subsidy`) by income source and household size and calculate annual subsidy per household (`subsidy_annual`). Multiply that figure by the number of households served to calculate the rental assistance required (`budget_rent`), then re-total to account for overhead costs (`budget_total`):

```{r}
#| echo: true

sB_budget <- sB_served |> 
  left_join(sB_subsidy, join_by(income_source, hh_size)) |> 
  mutate(
    subsidy_annual = subsidy * 12,
    budget_rent = subsidy_annual * hh_served,
    budget_total = budget_rent/(1 - sB_overhead)
    ) |> 
  select(1, 2, 4, 7, 8) |> 
  arrange(desc(income_source)) |> 
  adorn_totals()

```

```{r}
#| label: tbl-sB
#| tbl-cap: "Scenario B - Estimated annual budget by income source and household size"
#| tbl-pos: H

sB_budget |> 
  mutate(
    income_source = case_match(
      income_source,
      "ssi" ~ "SSI",
      "1500" ~ "$1,500/month",
      .default = income_source
    ),
    hh_size = case_match(
      hh_size,
      "person1" ~ "1 person",
      "person2" ~ "2 person",
      "person3" ~ "3 person",
      "person4" ~ "4 person",
      .default = hh_size
    )
  ) |> 
  mutate(across(4:5, ~ formattable::currency(.x))) |> 
  kbl(
    col.names = c("Income source", "Household size", "Households served", "Rental assistance", "Overhead included"),
    booktabs = T, align = "llccc", linesep = ""
    ) |> 
  row_spec(0, bold = T) |> 
  row_spec(9, bold = T) |> 
  collapse_rows(columns = 1, valign = "top") |> 
  add_header_above(c(" " = 3, "Estimated budget" = 2)) |> 
  kable_styling(full_width = T, latex_options = "hold_position")

sB_rent <- sum(sB_budget$budget_rent)/2 # Remove totaled sum

sB_total <- sum(sB_budget$budget_total)/2 # Remove totaled sum

sB_avg <- (sB_total)/sB_hh_served

```

\newpage

::: callout-note
### Scenario B results

*Average annual program cost per household: `{r} label_currency()(sB_avg)`*

\
Under Scenario B, a total of 150 households experiencing housing insecurity are served. Although two-thirds are individuals who have lower housing costs than households with children, the average cost per household is over twice that of Scenario A, due to the deep level of subsidy provided. The estimated annual cost for the rental assistance alone is `{r} label_currency(accuracy = 0.01)(sB_rent)`. Coupled with a higher administrative overhead for expanded case management (20%), the total projected funding required is `{r} label_currency(accuracy = 0.01)(sB_total)`.
:::

\newpage

## Scenario C – Reduce Severe Cost Burden for Lower-Income Working Families

This scenario outlines a LRSP with a total annual allocation of $500,000. The primary goal of the program is to reduce housing cost burden among households with incomes between 30% and 50% AMI. Households must have one working adult and one or more dependent. The model uses the following inputs to estimate the number of households served.

+------------------------------------+------------------------------------------------------+
| **Variable**                       | **Input**                                            |
+====================================+======================================================+
| *Total program budget*             | \$500,000\newline                                    |
+------------------------------------+------------------------------------------------------+
| *Eligibility*                      | Household income between 30% and 50% AMI\newline     |
|                                    | At least one working adult\newline                   |
|                                    | At least one dependent\newline                       |
+------------------------------------+------------------------------------------------------+
| *Subsidy amount*                   | Difference between the SAFMR and\newline             |
|                                    | 40% AMI of gross household income\newline            |
+------------------------------------+------------------------------------------------------+
| *Distribution of household*\       | 15% - 2-person\newline                               |
| *sizes among participants*         | 25% - 3-person\newline                               |
|                                    | 25% - 4-person\newline                               |
|                                    | 25% - 5-person\newline                               |
|                                    | 10% - 6-person\newline                               |
+------------------------------------+------------------------------------------------------+
| *Distribution of incomes*\         | 25% - 30% AMI\newline                                |
| *among participants*               | 50% - 40% AMI\newline                                |
|                                    | 25% - 50% AMI\newline                                |
+------------------------------------+------------------------------------------------------+
| *Administrative overhead*          | 15% of total program budget                          |
+------------------------------------+------------------------------------------------------+

Notes:

* SAFMR refers to the Small Area Fair Market Rent as adopted by Alexandria Redevelopment and Housing Authority (ARHA) for 2023.
* The affordable monthly rent is 40% of gross household income, not the standard 30%.
* The subsidy calculated for each household is respective to their household size.
* Families will only occupy 1-bedroom, 2-bedroom, or 3-bedroom units.
* The administrative overhead includes housing-specific case management.

\newpage

### Inputs

Assign budget (dollars) and overhead costs (percent) variables:

```{r}
#| echo: true

# Budget allocation
sC_budget <- 500000

# Overhead percentage
sC_overhead <- 0.15

```

Assign household distributions by AMI and household size (number of persons):

```{r}
#| echo: true

# Distribution of households by AMI
sC_ami <- c(`30% AMI` = 0.25, `40% AMI` = 0.50, `50% AMI` = 0.25)

# Distribution of households by household size
sC_person <- tibble(
  hh_size = paste0("person", 2:6),
  pct = c(0.15, 0.25, 0.25, 0.25, 0.10)
)

```

Because subsidy amounts will be calculated using SAFMR, we also need to estimate household shares across units by size (number of bedrooms). The model will use the following assumptions:

* 2-person: 100% 1-bedroom
* 3-person: 10% 1-bedroom, 90% 2-bedroom
* 4-person: 80% 2-bedroom, 20% 3-bedroom
* 5-person: 100% 3-bedroom
* 6-person: 100% 3-bedroom

```{r}
#| echo: true

# Distribution of household sizes by unit size
sC_unit <- list(
    `person2` = c(`bedroom1` = 1),
    `person3` = c(`bedroom1` = 0.1, `bedroom2` = 0.9),
    `person4` = c(`bedroom2` = 0.8, `bedroom3` = 0.2),
    `person5` = c(`bedroom3` = 1),
    `person6` = c(`bedroom3` = 1)
  )

```

```{r}

sC_unit |>
  enframe(name = "persons", value = "bedrooms") |> 
  unnest(bedrooms) |> 
  mutate(bedroom = names(bedrooms)) |> 
  pivot_wider(names_from = bedroom, values_from = bedrooms) |> 
  mutate(
    across(2:4, ~ as.character(.x)),
    across(2:4, ~ replace_na(.x, "-"))
    ) |> 
  kbl(booktabs = T, align = "lccc", linesep = "") |> 
  row_spec(0, bold = T) |> 
  kable_styling(full_width = T, latex_options = "hold_position")

```

\newpage

Create data frame with all permutations for income, unit size, and household sizes. Exclude non-valid combinations of unit and household size:

```{r}
#| echo: true

sC_hh_type <- expand.grid(
  AMI = names(sC_ami),
  bedrooms = unlist(lapply(names(sC_unit), function(unit) names(sC_unit[[unit]]))),
  hh_size = sC_person$hh_size
  ) |>
  distinct() |> 
  filter(
    !(bedrooms == "bedroom1" & !hh_size %in% c("person2", "person3")),
    !(bedrooms == "bedroom2" & hh_size %in% c("person2", "person5", "person6")),
    !(bedrooms == "bedroom3" & hh_size %in% c("person2", "person3"))
  )

```

\newpage

### Calculations

Create a function that tabulates the respective household distributions by AMI, household size, and unit type: 

```{r}
#| echo: true

sC_dist_fn <- function() {
  
  # Build data frame with AMI and household size distributions
  dist <- expand.grid(
    AMI = names(sC_ami),
    hh_size = sC_person$hh_size
  ) |>
    mutate(
      # Match hh_size with sC_person$hh_size to fetch the correct percentage
      households = sC_ami[AMI] * sC_person$pct[match(hh_size, sC_person$hh_size)]
    )

  # Initialize an empty data frame for the final distribution
  final_distribution <- data.frame()

  # Iterate distribution by unit size
  for (person in unique(sC_hh_type$hh_size)) {
    current_dist <- subset(dist, hh_size == person)

    for (bedroom_count in names(sC_unit[[person]])) {
      current_dist$bedrooms <- as.character(bedroom_count)

      current_dist$pct <- current_dist$households *
        sC_unit[[person]][bedroom_count]

      final_distribution <- rbind(
        final_distribution,
        current_dist[, c("AMI", "bedrooms", "hh_size", "pct")]
      )
    }
  }

  return(final_distribution)
}

sC_dist <- sC_dist_fn()

```

\newpage

Calculate affordable rents (`aff_rent`) at 30% AMI, 40% AMI, and 50% AMI for households with 2 to 6 persons (`hh_size`): 

```{r}
#| echo: true

# Monthly affordable rents by household size
sC_aff_rents <- hud_ami |> 
  filter(
    AMI %in% c("30% AMI", "40% AMI", "50% AMI"), # 30%, 40%, and 50% AMI only
    str_detect(hh_size, "[23456]") # 2-6 person households only
    ) |> 
  mutate(
    aff_rent = income/12 * 0.4 # 40% of monthly income
  ) |> 
  select(-3)

```

```{r}

# OK

sC_aff_rents |>
  arrange(AMI) |> 
  mutate(aff_rent = round(aff_rent, 2)) |> 
  kbl(booktabs = T, align = "llc", linesep = "") |> 
  row_spec(0, bold = T) |> 
  collapse_rows(columns = 1, valign = "top") |> 
  kable_styling(full_width = T, latex_options = "hold_position", font_size = 8)

```

\newpage

Join `sC_hh_type` with average FMR by unit size (`fmrs_avg`) and affordable rents (`sC_aff_rents`), then find difference between values to calculate the monthly subsidy (`subsidy`): 

```{r}
#| echo: true

sC_subsidy <- sC_hh_type |> 
  left_join(sC_aff_rents, join_by(AMI, hh_size)) |> 
  left_join(fmrs_avg) |> 
  mutate(subsidy = fmr_avg - aff_rent)
  
```

```{r}

sC_subsidy_tbl <- sC_subsidy |> 
  arrange(AMI, bedrooms) |> 
  mutate(
    across(4:6, ~ round(.x, 2))
    )

sC_subsidy_tbl |> 
  kbl(booktabs = T, align = "lllccc", linesep = "") |> 
  row_spec(0, bold = T) |> 
  column_spec(6, color = if_else(sC_subsidy_tbl$subsidy < 50, "red", "black")) |> 
  collapse_rows(columns = 1:2, valign = "top") |> 
  kable_styling(full_width = T, font_size = 8)

```

\newpage

::: callout-warning
### Some affordable rents almost equal to FMRs
Note that the subsidies for 5 household types are negligible --- under \$50. (See red values.) These cases are the result of higher affordable rents among those earning 50% AMI or more, along with the higher 40% tenant contribution.
:::

For the purposes of this model, these household types with no or very little subsidy need will be excluded. The sum of their respective shares will be redistributed to the remaining 16 household combinations.

Calculate total shares of excluded and remaining household types:

```{r}
#| echo: true

sC_excl <- sC_subsidy |> 
  left_join(sC_dist, join_by(AMI, bedrooms, hh_size)) |> 
  mutate(
    status = case_when(
      subsidy < 50 ~ "exclude",
      subsidy > 50 ~ "retain"
    ),
    .before = 7
  )

```

```{r}

sC_excl |> 
  summarise(pct = sum(pct), .by = status) |> 
  kbl(booktabs = T, align = "lc", linesep = "") |> 
  row_spec(0, bold = T) |> 
  row_spec(2, color = "red") |> 
  kable_styling(full_width = T, font_size = 8)

```

Evenly distributing this 0.175 across the remaining 16 combinations would not respect the original group distributions by AMI and household size. Therefore, this surplus share will be manually redistributed to each remaining combination to ensure the new AMI and household size group subtotals are as close to the original values as possible.

First, we determine the change in shares by each AMI and household size group resulting from excluding the 5 invalid combinations.

```{r}

sC_excl_grp <- sC_excl |> 
  select(1:3, 7:8) |> 
  mutate(
    pct_excl =
      case_when(
        status == "retain" ~ pct,
        status == "exclude" ~ 0
      )
  )

```

Change in shares grouped by AMI:

```{r}

sC_excl_ami <- sC_excl_grp |> 
  group_by(AMI) |> 
  summarise(across(4:5, sum)) |> 
  mutate(diff = pct_excl - pct)

sC_excl_ami |> 
  kbl(booktabs = T, align = "lccc", linesep = "") |> 
  row_spec(0, bold = T) |> 
  column_spec(4, color = if_else(sC_excl_ami$diff < 0, "red", "black")) |>
  kable_styling(full_width = T, font_size = 8)

```

Change in shares grouped by household size:

```{r}

sC_excl_hhsize <- sC_excl_grp |> 
  group_by(hh_size) |> 
  summarise(across(4:5, sum)) |> 
  mutate(diff = pct_excl - pct)

sC_excl_hhsize |> 
  kbl(booktabs = T, align = "lccc", linesep = "") |> 
  row_spec(0, bold = T) |> 
  column_spec(4, color = if_else(sC_excl_hhsize$diff < 0, "red", "black")) |>
  kable_styling(full_width = T, font_size = 8)

```

\newpage

In redistributing these shares, we will need to:

* Significantly increase the remaining 50% AMI household types (4-person and 5-person in 3-bedroom units) to maintain overall balance across AMI groups
* Reduce the corresponding shares in both 30% AMI and 40% AMI groups to maintain overall balance across household sizes
* Slightly increase the 2-person, 3-person, and 6-person household types in both 30% AMI and 40% AMI groups to account for losses within 50% AMI category

To accomplish this, the excluded share is divided into 16 parts ($p$):

$$p = \frac{0.175}{16} = 0.0109375$$

```{r}

p <- 0.175/16

```

We can increase or decrease each household combination by a multiple of $p$ as long as the net increase across all households is $+16p$. 

The following allocation reproduces the original AMI distribution, and a new household size distribution where each category is within $\pm 0.02$ of the original share.

```{r}

sC_redist <- sC_excl_grp |> 
  filter(status == "retain") |> 
  select(1, 2, 3, 5) |> 
  arrange(AMI, hh_size, bedrooms) |> 
  mutate(
    p_shares = case_when(
      AMI == "30% AMI" & bedrooms == "bedroom2" & hh_size == "person4" ~ 0,
      AMI == "30% AMI" & bedrooms == "bedroom3" & hh_size == "person4" ~ -1,
      AMI == "30% AMI" & bedrooms == "bedroom3" & hh_size == "person5" ~ -3,
      AMI == "40% AMI" & bedrooms == "bedroom3" & hh_size == "person4" ~ -2,
      AMI == "40% AMI" & bedrooms == "bedroom3" & hh_size == "person5" ~ -4,
      AMI == "40% AMI" & bedrooms == "bedroom3" & hh_size == "person6" ~ 2,
      AMI == "50% AMI" ~ 8,
      .default = 1
    ),
    pct_redist = pct + (p*p_shares)
  )

sC_redist |> 
  mutate(across(c(4,6), ~ round(.x, 4))) |> 
  kbl(booktabs = T, align = "lllccc", linesep = "", row.names = FALSE) |> 
  row_spec(0, bold = T) |> 
  collapse_rows(columns = 1:2, valign = "top", target = 1) |> 
  kable_styling(full_width = T, latex_options = "hold_position", font_size = 8)

```

\newpage

New distribution of households by AMI:

```{r}

sC_redist |> 
  group_by(AMI) |> 
  select(-2) |> 
  summarise(pct_redist = sum(pct_redist)) |> 
  kbl(booktabs = T, align = "lc", linesep = "") |> 
  row_spec(0, bold = T) |> 
  kable_styling(full_width = T, font_size = 8)

```

New distribution of households by household size:

```{r}

sC_redist |> 
  group_by(hh_size) |> 
  select(-2) |> 
  summarise(pct_redist = sum(pct_redist)) |> 
  mutate(pct_redist = round(pct_redist, 4)) |> 
  kbl(booktabs = T, align = "lc", linesep = "") |> 
  row_spec(0, bold = T) |> 
  kable_styling(full_width = T, font_size = 8)

```

\
Rejoin the redistributed households with the calculated subsidy amounts per household:

```{r}
#| echo: true

sC_redist_subsidy <- sC_subsidy |> 
  right_join(sC_redist, join_by(AMI, bedrooms, hh_size)) |> 
  select(1:3, 6, 9)
  
```

```{r}

# OK

sC_redist_subsidy |> 
  arrange(AMI, bedrooms) |> 
  mutate(
    subsidy = round(subsidy, 2),
    pct_redist = round(pct_redist, 4)
    ) |> 
  kbl(booktabs = T, align = "lllcc", linesep = "", row.names = FALSE) |> 
  row_spec(0, bold = T) |> 
  collapse_rows(columns = 1:2, valign = "top", target = 1) |> 
  kable_styling(full_width = T, latex_options = "hold_position", font_size = 8)

```

\newpage

Calculate annual subsidy per household (`subsidy_annual`) and the theoretical share of subsidy allocated for each household (`subsidy_share`). Determine the number of households served (`hh_served`) by normalizing `subsidy_share` to the known budget:

```{r}
#| echo: true

# Annual subsidy per household type
sC_subsidy_annual <- sC_redist_subsidy |>
  mutate(subsidy_annual = subsidy * 12) |> 
  select(AMI, bedrooms, hh_size, "pct" = pct_redist, subsidy_annual) |> 
  mutate(
    subsidy_share = subsidy_annual * pct, # Subsidy per HH type
    hh_served = pct*(sC_budget * (1 - sC_overhead))/sum(subsidy_share) # Adjust to known budget
  )

```

```{r}

# OK

sC_subsidy_annual |>
  select(-4) |> 
  mutate(
    across(4:5, ~ format(round(.x, digits = 2), nsmall = 2)),
    hh_served = formattable::digits(hh_served, 3)
    ) |> 
  arrange(AMI) |> 
  kbl(booktabs = T, align = "lllccc", linesep = "", row.names = FALSE) |> 
  row_spec(0, bold = T) |> 
  collapse_rows(columns = 1:2, valign = "top", target = 1) |> 
  kable_styling(full_width = T, latex_options = "hold_position", font_size = 8)

```

\newpage

Calculate and summarize the estimated budget and households served by AMI and household size:

```{r}
#| echo: true

sC_served <- sC_subsidy_annual |> 
  mutate(budget = hh_served * subsidy_annual) |> 
  summarise(
    budget = sum(budget),
    hh_served = sum(hh_served),
    .by = c(AMI, hh_size)
  )

```

```{r}

# OK

sC_served |>
  adorn_totals() |> 
  mutate(
    budget = format(round(budget, digits = 2), nsmall = 2),
    hh_served = formattable::digits(hh_served, 3)
    ) |> 
  arrange(AMI) |> 
  kbl(booktabs = T, align = "llcc", linesep = "", row.names = FALSE) |> 
  row_spec(0, bold = T) |> 
  collapse_rows(columns = 1:2, valign = "top") |> 
  kable_styling(full_width = T, latex_options = "hold_position", font_size = 8)

```

\newpage

### Model results

Round each estimate to the nearest whole number and determine total:

```{r}
#| echo: true

# Rounded estimates with grand total
sC_estimate <- sC_served |>
  arrange(AMI, hh_size) |> 
  mutate(
    hh_served = round(hh_served),
    hh_size = case_match(
      hh_size,
      "person2" ~ "2 person",
      "person3" ~ "3 person",
      "person4" ~ "4 person",
      "person5" ~ "5 person",
      "person6" ~ "6 person"
    )
  ) |> 
  adorn_totals()

```

```{r}
#| label: tbl-sC
#| tbl-cap: "Scenario C - Estimated Households Served by Household Size"
#| tbl-pos: H

# OK

sC_estimate |> 
  mutate(
    budget = formattable::currency(budget, digits = 0)
  ) |> 
  kbl(
    booktabs = T, align = "llcc", linesep = "", row.names = FALSE,
    col.names = c("Income", "Household size", "Budget", "Households served")
    ) |> 
  collapse_rows(1:2, valign = "top") |> 
  row_spec(0, bold = T) |> 
  row_spec(13, bold = T) |>
  kable_styling(full_width = T, latex_options = "hold_position")

sC_total <- sum(round(sC_served$hh_served))

sC_avg <- (sC_budget)/sC_total

```

::: callout-note
### Scenario C results

*Average annual program cost per household: `{r} label_currency()(sC_avg)`*

\
Under Scenario C, a total program budget of \$500,000 with a 15% administrative overhead leaves \$425,000 to fund rental assistance. Given the assumed household distributions by AMI, unit size, and household size, the total number of households served is `{r} sC_total`.
:::


```{r}

#| eval: false

funding <- tibble(
  var = c("Pilot Rental Subsidy", "LRSP Scenario A", "LRSP Scenario B", "LRSP Scenario C"),
  per_hh = c(7300, sA_avg, sB_avg, sC_avg),
  )

funding_plot <- funding |> 
  rowwise() |> 
  mutate(data = list(tibble(
    hh_served = 25:175,
    projected_budget = per_hh * hh_served
  ))) |> 
  unnest(data) |> 
  mutate(var = fct_reorder(var, projected_budget, mean))

label_data <- funding |> 
  mutate(hh_served = 100,  # Position for the label in the middle
         projected_budget = 3750000) |> 
  mutate(text = str_wrap("Average  annual cost per household", 18)) |> 
  mutate(per_hh = paste0("$", format(round(per_hh), big.mark = ",", trim = TRUE))) |> 
  mutate(var = fct_reorder(var, projected_budget, mean))
  
ggplot(funding_plot, aes(x = hh_served, y = projected_budget/1000000, color = var, fill = var)) +
  facet_wrap(~var, nrow = 1) +
  geom_line(linewidth = 1.25, lineend = "round") +
  geom_area(alpha = 0.5) +
  geom_text(data = label_data, aes(label = text), size = 8, lineheight = 0.3, nudge_y = -0.45) +
  geom_text(data = label_data, aes(label = per_hh), size = 16) +
  scale_color_hda() +
  scale_fill_hda() +
  scale_y_continuous(
    limits = c(0, 4),
    breaks = seq(0, 4, 0.5),
    expand = c(0.02, 0.01),
    labels = label_currency(accuracy = 0.1, suffix = "M")
    ) +
  add_zero_line() +
  labs(
    title = "Projected funding scopes for local rental assistance programs",
    subtitle = "Estimated annual program budget (millions) and households served",
    caption = "**Notes:** Pilot Rental Subsidy data as of April 2024. Plots show range of 25 to 175 households served."
  ) +
  theme_hda(base_size = 26)

ggsave("sandbox/alx/alx-funding.png", width = 6.5, height = 4, units = "in", bg = "white")

```

